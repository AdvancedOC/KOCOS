-- RAMFS!!!

-- KTAR is dead simple
--[[
struct archive {
    char header[5] = "KTAR\0";
    struct entry entries[];
}

// big endian!!!!
struct entry {
    // name MUST NOT start with /
    char name[64]; // NULL-terminated
    // directory if name ends in /
    union {
        struct {
            uint32_t dataSize;
            uint8_t data[dataSize]; // data array
        } file;
        struct {
            uint16_t entryCount;
            struct entry entries[entryCount]; // entry array
        } directory;
    };
}
]]
-- It is generated by tools/mkramfs.lua
-- The script will absolutely need to be reworked at some point to like let you specifc which files and directories should be there

---@class ktar.node
---@field name string
---@field data string | ktar.node[]

local ktar = {}

function ktar.bigEndian(num)
    local n = 0
    for i=1,#num do
        local b = num:byte(i, i)
        n = n * 256 + b
    end
    return n
end

---@return ktar.node, integer -- Node, size
function ktar.parseNode(data, off)
    local name = data:sub(off+1, off+64)
    local term = name:find("\0")
    if term then name = name:sub(1, term-1) end

    local size = 64
    if name:sub(-1, -1) == "/" then
        local count = ktar.bigEndian(data:sub(off+65, off+66))
        size = size + 2
        local subnodes = {}
        for _=1,count do
            local child, childSize = ktar.parseNode(data, off+size)
            size = size + childSize
            table.insert(subnodes, child)
        end
        return {
            name = name,
            data = subnodes,
        }, size
    else
        local len = ktar.bigEndian(data:sub(off+65, off+68))
        local contents = data:sub(off+69, off+68 + len)
        size = size + 4 + len
        return {
            name = name,
            data = contents,
        }, size
    end
end

---@param image KOCOS.RamFS.Image
---@param node ktar.node
---@param prefix string
function ktar.addToImage(image, node, prefix)
    local path = prefix .. node.name
    if path:sub(-1, -1) == "/" then path = path:sub(1, -2) end
    -- For debug
    ---@type string | string[]
    local data = {}

    if type(node.data) == "string" then
        data = node.data
    elseif type(node.data) == "table" then
        for _, child in ipairs(node.data) do
            ktar.addToImage(image, child, path .. "/")
            table.insert(data, child.name)
        end
    end

    image[path] = data
end

---@param tree ktar.node
---@param indent? integer
function ktar.dumpTree(tree, indent)
    indent = indent or 0
    local prefix = string.rep(" ", indent)
    local data = prefix .. tree.name .. "\n"
    if type(tree.data) == "table" then
        for _, child in ipairs(tree.data) do
            data = data .. ktar.dumpTree(child, indent+2)
        end
    end
    return data
end

---@type KOCOS.RamFS.Parser
function ktar.parse(data)
    if data:sub(1, 5) ~= "KTAR\0" then return end
    local img = {
        -- we need a reference to root
        [""] = {},
        -- devfs and tmpfs need them
        ["dev"] = {},
        ["tmp"] = {},
    }
    local off = 5
    while off < #data do
        local tree, size = ktar.parseNode(data, off)
        table.insert(img[""], tree.name)
        ktar.addToImage(img, tree, "")
        off = off + size
    end
    return img
end

KOCOS.ramfs.addParser(ktar.parse)
